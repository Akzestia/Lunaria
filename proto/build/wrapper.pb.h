// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wrapper.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_wrapper_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_wrapper_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "user.pb.h"
#include "test.pb.h"
#include "message.pb.h"
#include "auth.pb.h"
#include "report.pb.h"
#include "invite_link.pb.h"
#include "server.pb.h"
#include "vpn_graph.pb.h"
#include "authResponse.pb.h"
#include "contact.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wrapper_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_wrapper_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_wrapper_2eproto;
class Wrapper;
struct WrapperDefaultTypeInternal;
extern WrapperDefaultTypeInternal _Wrapper_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Wrapper final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Wrapper) */ {
 public:
  inline Wrapper() : Wrapper(nullptr) {}
  ~Wrapper() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Wrapper(
      ::google::protobuf::internal::ConstantInitialized);

  inline Wrapper(const Wrapper& from) : Wrapper(nullptr, from) {}
  inline Wrapper(Wrapper&& from) noexcept
      : Wrapper(nullptr, std::move(from)) {}
  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wrapper& operator=(Wrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Wrapper& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kUser = 3,
    kPerson = 4,
    kMessage = 5,
    kAuth = 6,
    kReport = 7,
    kSerevr = 8,
    kInviteLink = 9,
    kVpnGraph = 10,
    kAuthResponse = 11,
    kContact = 12,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Wrapper* internal_default_instance() {
    return reinterpret_cast<const Wrapper*>(
        &_Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Wrapper& a, Wrapper& b) { a.Swap(&b); }
  inline void Swap(Wrapper* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Wrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Wrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Wrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Wrapper& from) { Wrapper::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Wrapper* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Wrapper"; }

 protected:
  explicit Wrapper(::google::protobuf::Arena* arena);
  Wrapper(::google::protobuf::Arena* arena, const Wrapper& from);
  Wrapper(::google::protobuf::Arena* arena, Wrapper&& from) noexcept
      : Wrapper(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuthTokenFieldNumber = 2,
    kRouteFieldNumber = 1,
    kUserFieldNumber = 3,
    kPersonFieldNumber = 4,
    kMessageFieldNumber = 5,
    kAuthFieldNumber = 6,
    kReportFieldNumber = 7,
    kSerevrFieldNumber = 8,
    kInviteLinkFieldNumber = 9,
    kVpnGraphFieldNumber = 10,
    kAuthResponseFieldNumber = 11,
    kContactFieldNumber = 12,
  };
  // optional string AuthToken = 2;
  bool has_authtoken() const;
  void clear_authtoken() ;
  const std::string& authtoken() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authtoken(Arg_&& arg, Args_... args);
  std::string* mutable_authtoken();
  PROTOBUF_NODISCARD std::string* release_authtoken();
  void set_allocated_authtoken(std::string* value);

  private:
  const std::string& _internal_authtoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authtoken(
      const std::string& value);
  std::string* _internal_mutable_authtoken();

  public:
  // uint32 route = 1;
  void clear_route() ;
  ::uint32_t route() const;
  void set_route(::uint32_t value);

  private:
  ::uint32_t _internal_route() const;
  void _internal_set_route(::uint32_t value);

  public:
  // .User user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;

  public:
  void clear_user() ;
  const ::User& user() const;
  PROTOBUF_NODISCARD ::User* release_user();
  ::User* mutable_user();
  void set_allocated_user(::User* value);
  void unsafe_arena_set_allocated_user(::User* value);
  ::User* unsafe_arena_release_user();

  private:
  const ::User& _internal_user() const;
  ::User* _internal_mutable_user();

  public:
  // .Person person = 4;
  bool has_person() const;
  private:
  bool _internal_has_person() const;

  public:
  void clear_person() ;
  const ::Person& person() const;
  PROTOBUF_NODISCARD ::Person* release_person();
  ::Person* mutable_person();
  void set_allocated_person(::Person* value);
  void unsafe_arena_set_allocated_person(::Person* value);
  ::Person* unsafe_arena_release_person();

  private:
  const ::Person& _internal_person() const;
  ::Person* _internal_mutable_person();

  public:
  // .Message message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;

  public:
  void clear_message() ;
  const ::Message& message() const;
  PROTOBUF_NODISCARD ::Message* release_message();
  ::Message* mutable_message();
  void set_allocated_message(::Message* value);
  void unsafe_arena_set_allocated_message(::Message* value);
  ::Message* unsafe_arena_release_message();

  private:
  const ::Message& _internal_message() const;
  ::Message* _internal_mutable_message();

  public:
  // .Auth auth = 6;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;

  public:
  void clear_auth() ;
  const ::Auth& auth() const;
  PROTOBUF_NODISCARD ::Auth* release_auth();
  ::Auth* mutable_auth();
  void set_allocated_auth(::Auth* value);
  void unsafe_arena_set_allocated_auth(::Auth* value);
  ::Auth* unsafe_arena_release_auth();

  private:
  const ::Auth& _internal_auth() const;
  ::Auth* _internal_mutable_auth();

  public:
  // .Report report = 7;
  bool has_report() const;
  private:
  bool _internal_has_report() const;

  public:
  void clear_report() ;
  const ::Report& report() const;
  PROTOBUF_NODISCARD ::Report* release_report();
  ::Report* mutable_report();
  void set_allocated_report(::Report* value);
  void unsafe_arena_set_allocated_report(::Report* value);
  ::Report* unsafe_arena_release_report();

  private:
  const ::Report& _internal_report() const;
  ::Report* _internal_mutable_report();

  public:
  // .Server serevr = 8;
  bool has_serevr() const;
  private:
  bool _internal_has_serevr() const;

  public:
  void clear_serevr() ;
  const ::Server& serevr() const;
  PROTOBUF_NODISCARD ::Server* release_serevr();
  ::Server* mutable_serevr();
  void set_allocated_serevr(::Server* value);
  void unsafe_arena_set_allocated_serevr(::Server* value);
  ::Server* unsafe_arena_release_serevr();

  private:
  const ::Server& _internal_serevr() const;
  ::Server* _internal_mutable_serevr();

  public:
  // .Invite_link invite_link = 9;
  bool has_invite_link() const;
  private:
  bool _internal_has_invite_link() const;

  public:
  void clear_invite_link() ;
  const ::Invite_link& invite_link() const;
  PROTOBUF_NODISCARD ::Invite_link* release_invite_link();
  ::Invite_link* mutable_invite_link();
  void set_allocated_invite_link(::Invite_link* value);
  void unsafe_arena_set_allocated_invite_link(::Invite_link* value);
  ::Invite_link* unsafe_arena_release_invite_link();

  private:
  const ::Invite_link& _internal_invite_link() const;
  ::Invite_link* _internal_mutable_invite_link();

  public:
  // .Vpn_graph vpn_graph = 10;
  bool has_vpn_graph() const;
  private:
  bool _internal_has_vpn_graph() const;

  public:
  void clear_vpn_graph() ;
  const ::Vpn_graph& vpn_graph() const;
  PROTOBUF_NODISCARD ::Vpn_graph* release_vpn_graph();
  ::Vpn_graph* mutable_vpn_graph();
  void set_allocated_vpn_graph(::Vpn_graph* value);
  void unsafe_arena_set_allocated_vpn_graph(::Vpn_graph* value);
  ::Vpn_graph* unsafe_arena_release_vpn_graph();

  private:
  const ::Vpn_graph& _internal_vpn_graph() const;
  ::Vpn_graph* _internal_mutable_vpn_graph();

  public:
  // .AuthResponse authResponse = 11;
  bool has_authresponse() const;
  private:
  bool _internal_has_authresponse() const;

  public:
  void clear_authresponse() ;
  const ::AuthResponse& authresponse() const;
  PROTOBUF_NODISCARD ::AuthResponse* release_authresponse();
  ::AuthResponse* mutable_authresponse();
  void set_allocated_authresponse(::AuthResponse* value);
  void unsafe_arena_set_allocated_authresponse(::AuthResponse* value);
  ::AuthResponse* unsafe_arena_release_authresponse();

  private:
  const ::AuthResponse& _internal_authresponse() const;
  ::AuthResponse* _internal_mutable_authresponse();

  public:
  // .Contact contact = 12;
  bool has_contact() const;
  private:
  bool _internal_has_contact() const;

  public:
  void clear_contact() ;
  const ::Contact& contact() const;
  PROTOBUF_NODISCARD ::Contact* release_contact();
  ::Contact* mutable_contact();
  void set_allocated_contact(::Contact* value);
  void unsafe_arena_set_allocated_contact(::Contact* value);
  ::Contact* unsafe_arena_release_contact();

  private:
  const ::Contact& _internal_contact() const;
  ::Contact* _internal_mutable_contact();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Wrapper)
 private:
  class _Internal;
  void set_has_user();
  void set_has_person();
  void set_has_message();
  void set_has_auth();
  void set_has_report();
  void set_has_serevr();
  void set_has_invite_link();
  void set_has_vpn_graph();
  void set_has_authresponse();
  void set_has_contact();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 12, 10,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Wrapper_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Wrapper& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr authtoken_;
    ::uint32_t route_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::User* user_;
      ::Person* person_;
      ::Message* message_;
      ::Auth* auth_;
      ::Report* report_;
      ::Server* serevr_;
      ::Invite_link* invite_link_;
      ::Vpn_graph* vpn_graph_;
      ::AuthResponse* authresponse_;
      ::Contact* contact_;
    } payload_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wrapper_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Wrapper

// uint32 route = 1;
inline void Wrapper::clear_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.route_ = 0u;
}
inline ::uint32_t Wrapper::route() const {
  // @@protoc_insertion_point(field_get:Wrapper.route)
  return _internal_route();
}
inline void Wrapper::set_route(::uint32_t value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:Wrapper.route)
}
inline ::uint32_t Wrapper::_internal_route() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.route_;
}
inline void Wrapper::_internal_set_route(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.route_ = value;
}

// optional string AuthToken = 2;
inline bool Wrapper::has_authtoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Wrapper::clear_authtoken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authtoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Wrapper::authtoken() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.AuthToken)
  return _internal_authtoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Wrapper::set_authtoken(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.authtoken_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Wrapper.AuthToken)
}
inline std::string* Wrapper::mutable_authtoken() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_authtoken();
  // @@protoc_insertion_point(field_mutable:Wrapper.AuthToken)
  return _s;
}
inline const std::string& Wrapper::_internal_authtoken() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authtoken_.Get();
}
inline void Wrapper::_internal_set_authtoken(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.authtoken_.Set(value, GetArena());
}
inline std::string* Wrapper::_internal_mutable_authtoken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.authtoken_.Mutable( GetArena());
}
inline std::string* Wrapper::release_authtoken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Wrapper.AuthToken)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.authtoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authtoken_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Wrapper::set_allocated_authtoken(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authtoken_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authtoken_.IsDefault()) {
          _impl_.authtoken_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Wrapper.AuthToken)
}

// .User user = 3;
inline bool Wrapper::has_user() const {
  return payload_case() == kUser;
}
inline bool Wrapper::_internal_has_user() const {
  return payload_case() == kUser;
}
inline void Wrapper::set_has_user() {
  _impl_._oneof_case_[0] = kUser;
}
inline ::User* Wrapper::release_user() {
  // @@protoc_insertion_point(field_release:Wrapper.user)
  if (payload_case() == kUser) {
    clear_has_payload();
    auto* temp = _impl_.payload_.user_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::User& Wrapper::_internal_user() const {
  return payload_case() == kUser ? *_impl_.payload_.user_ : reinterpret_cast<::User&>(::_User_default_instance_);
}
inline const ::User& Wrapper::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.user)
  return _internal_user();
}
inline ::User* Wrapper::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.user)
  if (payload_case() == kUser) {
    clear_has_payload();
    auto* temp = _impl_.payload_.user_;
    _impl_.payload_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_user(::User* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_user();
    _impl_.payload_.user_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.user)
}
inline ::User* Wrapper::_internal_mutable_user() {
  if (payload_case() != kUser) {
    clear_payload();
    set_has_user();
    _impl_.payload_.user_ =
        ::google::protobuf::Message::DefaultConstruct<::User>(GetArena());
  }
  return _impl_.payload_.user_;
}
inline ::User* Wrapper::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:Wrapper.user)
  return _msg;
}

// .Person person = 4;
inline bool Wrapper::has_person() const {
  return payload_case() == kPerson;
}
inline bool Wrapper::_internal_has_person() const {
  return payload_case() == kPerson;
}
inline void Wrapper::set_has_person() {
  _impl_._oneof_case_[0] = kPerson;
}
inline ::Person* Wrapper::release_person() {
  // @@protoc_insertion_point(field_release:Wrapper.person)
  if (payload_case() == kPerson) {
    clear_has_payload();
    auto* temp = _impl_.payload_.person_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.person_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Person& Wrapper::_internal_person() const {
  return payload_case() == kPerson ? *_impl_.payload_.person_ : reinterpret_cast<::Person&>(::_Person_default_instance_);
}
inline const ::Person& Wrapper::person() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.person)
  return _internal_person();
}
inline ::Person* Wrapper::unsafe_arena_release_person() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.person)
  if (payload_case() == kPerson) {
    clear_has_payload();
    auto* temp = _impl_.payload_.person_;
    _impl_.payload_.person_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_person(::Person* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_person();
    _impl_.payload_.person_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.person)
}
inline ::Person* Wrapper::_internal_mutable_person() {
  if (payload_case() != kPerson) {
    clear_payload();
    set_has_person();
    _impl_.payload_.person_ =
        ::google::protobuf::Message::DefaultConstruct<::Person>(GetArena());
  }
  return _impl_.payload_.person_;
}
inline ::Person* Wrapper::mutable_person() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Person* _msg = _internal_mutable_person();
  // @@protoc_insertion_point(field_mutable:Wrapper.person)
  return _msg;
}

// .Message message = 5;
inline bool Wrapper::has_message() const {
  return payload_case() == kMessage;
}
inline bool Wrapper::_internal_has_message() const {
  return payload_case() == kMessage;
}
inline void Wrapper::set_has_message() {
  _impl_._oneof_case_[0] = kMessage;
}
inline ::Message* Wrapper::release_message() {
  // @@protoc_insertion_point(field_release:Wrapper.message)
  if (payload_case() == kMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Message& Wrapper::_internal_message() const {
  return payload_case() == kMessage ? *_impl_.payload_.message_ : reinterpret_cast<::Message&>(::_Message_default_instance_);
}
inline const ::Message& Wrapper::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.message)
  return _internal_message();
}
inline ::Message* Wrapper::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.message)
  if (payload_case() == kMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.message_;
    _impl_.payload_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_message(::Message* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_message();
    _impl_.payload_.message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.message)
}
inline ::Message* Wrapper::_internal_mutable_message() {
  if (payload_case() != kMessage) {
    clear_payload();
    set_has_message();
    _impl_.payload_.message_ =
        ::google::protobuf::Message::DefaultConstruct<::Message>(GetArena());
  }
  return _impl_.payload_.message_;
}
inline ::Message* Wrapper::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Wrapper.message)
  return _msg;
}

// .Auth auth = 6;
inline bool Wrapper::has_auth() const {
  return payload_case() == kAuth;
}
inline bool Wrapper::_internal_has_auth() const {
  return payload_case() == kAuth;
}
inline void Wrapper::set_has_auth() {
  _impl_._oneof_case_[0] = kAuth;
}
inline ::Auth* Wrapper::release_auth() {
  // @@protoc_insertion_point(field_release:Wrapper.auth)
  if (payload_case() == kAuth) {
    clear_has_payload();
    auto* temp = _impl_.payload_.auth_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.auth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Auth& Wrapper::_internal_auth() const {
  return payload_case() == kAuth ? *_impl_.payload_.auth_ : reinterpret_cast<::Auth&>(::_Auth_default_instance_);
}
inline const ::Auth& Wrapper::auth() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.auth)
  return _internal_auth();
}
inline ::Auth* Wrapper::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.auth)
  if (payload_case() == kAuth) {
    clear_has_payload();
    auto* temp = _impl_.payload_.auth_;
    _impl_.payload_.auth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_auth(::Auth* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_auth();
    _impl_.payload_.auth_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.auth)
}
inline ::Auth* Wrapper::_internal_mutable_auth() {
  if (payload_case() != kAuth) {
    clear_payload();
    set_has_auth();
    _impl_.payload_.auth_ =
        ::google::protobuf::Message::DefaultConstruct<::Auth>(GetArena());
  }
  return _impl_.payload_.auth_;
}
inline ::Auth* Wrapper::mutable_auth() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Auth* _msg = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:Wrapper.auth)
  return _msg;
}

// .Report report = 7;
inline bool Wrapper::has_report() const {
  return payload_case() == kReport;
}
inline bool Wrapper::_internal_has_report() const {
  return payload_case() == kReport;
}
inline void Wrapper::set_has_report() {
  _impl_._oneof_case_[0] = kReport;
}
inline ::Report* Wrapper::release_report() {
  // @@protoc_insertion_point(field_release:Wrapper.report)
  if (payload_case() == kReport) {
    clear_has_payload();
    auto* temp = _impl_.payload_.report_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Report& Wrapper::_internal_report() const {
  return payload_case() == kReport ? *_impl_.payload_.report_ : reinterpret_cast<::Report&>(::_Report_default_instance_);
}
inline const ::Report& Wrapper::report() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.report)
  return _internal_report();
}
inline ::Report* Wrapper::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.report)
  if (payload_case() == kReport) {
    clear_has_payload();
    auto* temp = _impl_.payload_.report_;
    _impl_.payload_.report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_report(::Report* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_report();
    _impl_.payload_.report_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.report)
}
inline ::Report* Wrapper::_internal_mutable_report() {
  if (payload_case() != kReport) {
    clear_payload();
    set_has_report();
    _impl_.payload_.report_ =
        ::google::protobuf::Message::DefaultConstruct<::Report>(GetArena());
  }
  return _impl_.payload_.report_;
}
inline ::Report* Wrapper::mutable_report() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Report* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:Wrapper.report)
  return _msg;
}

// .Server serevr = 8;
inline bool Wrapper::has_serevr() const {
  return payload_case() == kSerevr;
}
inline bool Wrapper::_internal_has_serevr() const {
  return payload_case() == kSerevr;
}
inline void Wrapper::set_has_serevr() {
  _impl_._oneof_case_[0] = kSerevr;
}
inline ::Server* Wrapper::release_serevr() {
  // @@protoc_insertion_point(field_release:Wrapper.serevr)
  if (payload_case() == kSerevr) {
    clear_has_payload();
    auto* temp = _impl_.payload_.serevr_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.serevr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server& Wrapper::_internal_serevr() const {
  return payload_case() == kSerevr ? *_impl_.payload_.serevr_ : reinterpret_cast<::Server&>(::_Server_default_instance_);
}
inline const ::Server& Wrapper::serevr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.serevr)
  return _internal_serevr();
}
inline ::Server* Wrapper::unsafe_arena_release_serevr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.serevr)
  if (payload_case() == kSerevr) {
    clear_has_payload();
    auto* temp = _impl_.payload_.serevr_;
    _impl_.payload_.serevr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_serevr(::Server* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_serevr();
    _impl_.payload_.serevr_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.serevr)
}
inline ::Server* Wrapper::_internal_mutable_serevr() {
  if (payload_case() != kSerevr) {
    clear_payload();
    set_has_serevr();
    _impl_.payload_.serevr_ =
        ::google::protobuf::Message::DefaultConstruct<::Server>(GetArena());
  }
  return _impl_.payload_.serevr_;
}
inline ::Server* Wrapper::mutable_serevr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Server* _msg = _internal_mutable_serevr();
  // @@protoc_insertion_point(field_mutable:Wrapper.serevr)
  return _msg;
}

// .Invite_link invite_link = 9;
inline bool Wrapper::has_invite_link() const {
  return payload_case() == kInviteLink;
}
inline bool Wrapper::_internal_has_invite_link() const {
  return payload_case() == kInviteLink;
}
inline void Wrapper::set_has_invite_link() {
  _impl_._oneof_case_[0] = kInviteLink;
}
inline ::Invite_link* Wrapper::release_invite_link() {
  // @@protoc_insertion_point(field_release:Wrapper.invite_link)
  if (payload_case() == kInviteLink) {
    clear_has_payload();
    auto* temp = _impl_.payload_.invite_link_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.invite_link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Invite_link& Wrapper::_internal_invite_link() const {
  return payload_case() == kInviteLink ? *_impl_.payload_.invite_link_ : reinterpret_cast<::Invite_link&>(::_Invite_link_default_instance_);
}
inline const ::Invite_link& Wrapper::invite_link() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.invite_link)
  return _internal_invite_link();
}
inline ::Invite_link* Wrapper::unsafe_arena_release_invite_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.invite_link)
  if (payload_case() == kInviteLink) {
    clear_has_payload();
    auto* temp = _impl_.payload_.invite_link_;
    _impl_.payload_.invite_link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_invite_link(::Invite_link* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_invite_link();
    _impl_.payload_.invite_link_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.invite_link)
}
inline ::Invite_link* Wrapper::_internal_mutable_invite_link() {
  if (payload_case() != kInviteLink) {
    clear_payload();
    set_has_invite_link();
    _impl_.payload_.invite_link_ =
        ::google::protobuf::Message::DefaultConstruct<::Invite_link>(GetArena());
  }
  return _impl_.payload_.invite_link_;
}
inline ::Invite_link* Wrapper::mutable_invite_link() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Invite_link* _msg = _internal_mutable_invite_link();
  // @@protoc_insertion_point(field_mutable:Wrapper.invite_link)
  return _msg;
}

// .Vpn_graph vpn_graph = 10;
inline bool Wrapper::has_vpn_graph() const {
  return payload_case() == kVpnGraph;
}
inline bool Wrapper::_internal_has_vpn_graph() const {
  return payload_case() == kVpnGraph;
}
inline void Wrapper::set_has_vpn_graph() {
  _impl_._oneof_case_[0] = kVpnGraph;
}
inline ::Vpn_graph* Wrapper::release_vpn_graph() {
  // @@protoc_insertion_point(field_release:Wrapper.vpn_graph)
  if (payload_case() == kVpnGraph) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vpn_graph_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.vpn_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Vpn_graph& Wrapper::_internal_vpn_graph() const {
  return payload_case() == kVpnGraph ? *_impl_.payload_.vpn_graph_ : reinterpret_cast<::Vpn_graph&>(::_Vpn_graph_default_instance_);
}
inline const ::Vpn_graph& Wrapper::vpn_graph() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.vpn_graph)
  return _internal_vpn_graph();
}
inline ::Vpn_graph* Wrapper::unsafe_arena_release_vpn_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.vpn_graph)
  if (payload_case() == kVpnGraph) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vpn_graph_;
    _impl_.payload_.vpn_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_vpn_graph(::Vpn_graph* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_vpn_graph();
    _impl_.payload_.vpn_graph_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.vpn_graph)
}
inline ::Vpn_graph* Wrapper::_internal_mutable_vpn_graph() {
  if (payload_case() != kVpnGraph) {
    clear_payload();
    set_has_vpn_graph();
    _impl_.payload_.vpn_graph_ =
        ::google::protobuf::Message::DefaultConstruct<::Vpn_graph>(GetArena());
  }
  return _impl_.payload_.vpn_graph_;
}
inline ::Vpn_graph* Wrapper::mutable_vpn_graph() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Vpn_graph* _msg = _internal_mutable_vpn_graph();
  // @@protoc_insertion_point(field_mutable:Wrapper.vpn_graph)
  return _msg;
}

// .AuthResponse authResponse = 11;
inline bool Wrapper::has_authresponse() const {
  return payload_case() == kAuthResponse;
}
inline bool Wrapper::_internal_has_authresponse() const {
  return payload_case() == kAuthResponse;
}
inline void Wrapper::set_has_authresponse() {
  _impl_._oneof_case_[0] = kAuthResponse;
}
inline ::AuthResponse* Wrapper::release_authresponse() {
  // @@protoc_insertion_point(field_release:Wrapper.authResponse)
  if (payload_case() == kAuthResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.authresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.authresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AuthResponse& Wrapper::_internal_authresponse() const {
  return payload_case() == kAuthResponse ? *_impl_.payload_.authresponse_ : reinterpret_cast<::AuthResponse&>(::_AuthResponse_default_instance_);
}
inline const ::AuthResponse& Wrapper::authresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.authResponse)
  return _internal_authresponse();
}
inline ::AuthResponse* Wrapper::unsafe_arena_release_authresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.authResponse)
  if (payload_case() == kAuthResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.authresponse_;
    _impl_.payload_.authresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_authresponse(::AuthResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_authresponse();
    _impl_.payload_.authresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.authResponse)
}
inline ::AuthResponse* Wrapper::_internal_mutable_authresponse() {
  if (payload_case() != kAuthResponse) {
    clear_payload();
    set_has_authresponse();
    _impl_.payload_.authresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::AuthResponse>(GetArena());
  }
  return _impl_.payload_.authresponse_;
}
inline ::AuthResponse* Wrapper::mutable_authresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::AuthResponse* _msg = _internal_mutable_authresponse();
  // @@protoc_insertion_point(field_mutable:Wrapper.authResponse)
  return _msg;
}

// .Contact contact = 12;
inline bool Wrapper::has_contact() const {
  return payload_case() == kContact;
}
inline bool Wrapper::_internal_has_contact() const {
  return payload_case() == kContact;
}
inline void Wrapper::set_has_contact() {
  _impl_._oneof_case_[0] = kContact;
}
inline ::Contact* Wrapper::release_contact() {
  // @@protoc_insertion_point(field_release:Wrapper.contact)
  if (payload_case() == kContact) {
    clear_has_payload();
    auto* temp = _impl_.payload_.contact_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.contact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Contact& Wrapper::_internal_contact() const {
  return payload_case() == kContact ? *_impl_.payload_.contact_ : reinterpret_cast<::Contact&>(::_Contact_default_instance_);
}
inline const ::Contact& Wrapper::contact() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Wrapper.contact)
  return _internal_contact();
}
inline ::Contact* Wrapper::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.contact)
  if (payload_case() == kContact) {
    clear_has_payload();
    auto* temp = _impl_.payload_.contact_;
    _impl_.payload_.contact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_contact(::Contact* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_contact();
    _impl_.payload_.contact_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.contact)
}
inline ::Contact* Wrapper::_internal_mutable_contact() {
  if (payload_case() != kContact) {
    clear_payload();
    set_has_contact();
    _impl_.payload_.contact_ =
        ::google::protobuf::Message::DefaultConstruct<::Contact>(GetArena());
  }
  return _impl_.payload_.contact_;
}
inline ::Contact* Wrapper::mutable_contact() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Contact* _msg = _internal_mutable_contact();
  // @@protoc_insertion_point(field_mutable:Wrapper.contact)
  return _msg;
}

inline bool Wrapper::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Wrapper::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Wrapper::PayloadCase Wrapper::payload_case() const {
  return Wrapper::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_wrapper_2eproto_2epb_2eh
