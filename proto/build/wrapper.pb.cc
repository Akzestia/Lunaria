// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wrapper.proto
// Protobuf C++ Version: 5.27.2

#include "wrapper.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Wrapper::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        authtoken_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        route_{0u},
        payload_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Wrapper::Wrapper(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrapperDefaultTypeInternal() {}
  union {
    Wrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrapperDefaultTypeInternal _Wrapper_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_wrapper_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_wrapper_2eproto = nullptr;
const ::uint32_t
    TableStruct_wrapper_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Wrapper, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_.route_),
        PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_.authtoken_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_.payload_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 21, -1, sizeof(::Wrapper)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Wrapper_default_instance_._instance,
};
const char descriptor_table_protodef_wrapper_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rwrapper.proto\032\nuser.proto\032\ntest.proto\032"
    "\rmessage.proto\032\nauth.proto\032\014report.proto"
    "\032\021invite_link.proto\032\014server.proto\032\017vpn_g"
    "raph.proto\032\022authResponse.proto\032\rcontact."
    "proto\"\357\002\n\007Wrapper\022\r\n\005route\030\001 \001(\r\022\026\n\tAuth"
    "Token\030\002 \001(\tH\001\210\001\001\022\025\n\004user\030\003 \001(\0132\005.UserH\000\022"
    "\031\n\006person\030\004 \001(\0132\007.PersonH\000\022\033\n\007message\030\005 "
    "\001(\0132\010.MessageH\000\022\025\n\004auth\030\006 \001(\0132\005.AuthH\000\022\031"
    "\n\006report\030\007 \001(\0132\007.ReportH\000\022\031\n\006serevr\030\010 \001("
    "\0132\007.ServerH\000\022#\n\013invite_link\030\t \001(\0132\014.Invi"
    "te_linkH\000\022\037\n\tvpn_graph\030\n \001(\0132\n.Vpn_graph"
    "H\000\022%\n\014authResponse\030\013 \001(\0132\r.AuthResponseH"
    "\000\022\033\n\007contact\030\014 \001(\0132\010.ContactH\000B\t\n\007payloa"
    "dB\014\n\n_AuthTokenb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_wrapper_2eproto_deps[10] =
    {
        &::descriptor_table_auth_2eproto,
        &::descriptor_table_authResponse_2eproto,
        &::descriptor_table_contact_2eproto,
        &::descriptor_table_invite_5flink_2eproto,
        &::descriptor_table_message_2eproto,
        &::descriptor_table_report_2eproto,
        &::descriptor_table_server_2eproto,
        &::descriptor_table_test_2eproto,
        &::descriptor_table_user_2eproto,
        &::descriptor_table_vpn_5fgraph_2eproto,
};
static ::absl::once_flag descriptor_table_wrapper_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_wrapper_2eproto = {
    false,
    false,
    543,
    descriptor_table_protodef_wrapper_2eproto,
    "wrapper.proto",
    &descriptor_table_wrapper_2eproto_once,
    descriptor_table_wrapper_2eproto_deps,
    10,
    1,
    schemas,
    file_default_instances,
    TableStruct_wrapper_2eproto::offsets,
    file_level_enum_descriptors_wrapper_2eproto,
    file_level_service_descriptors_wrapper_2eproto,
};
// ===================================================================

class Wrapper::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Wrapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Wrapper, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_._oneof_case_);
};

void Wrapper::set_allocated_user(::User* user) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (user) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(message_arena, user, submessage_arena);
    }
    set_has_user();
    _impl_.payload_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.user)
}
void Wrapper::clear_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kUser) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.user_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.user_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_person(::Person* person) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (person) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(person)->GetArena();
    if (message_arena != submessage_arena) {
      person = ::google::protobuf::internal::GetOwnedMessage(message_arena, person, submessage_arena);
    }
    set_has_person();
    _impl_.payload_.person_ = person;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.person)
}
void Wrapper::clear_person() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kPerson) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.person_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.person_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_message(::Message* message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(message_arena, message, submessage_arena);
    }
    set_has_message();
    _impl_.payload_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.message)
}
void Wrapper::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.message_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.message_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_auth(::Auth* auth) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(auth)->GetArena();
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(message_arena, auth, submessage_arena);
    }
    set_has_auth();
    _impl_.payload_.auth_ = auth;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.auth)
}
void Wrapper::clear_auth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAuth) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.auth_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.auth_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_report(::Report* report) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (report) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(report)->GetArena();
    if (message_arena != submessage_arena) {
      report = ::google::protobuf::internal::GetOwnedMessage(message_arena, report, submessage_arena);
    }
    set_has_report();
    _impl_.payload_.report_ = report;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.report)
}
void Wrapper::clear_report() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kReport) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.report_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.report_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_serevr(::Server* serevr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (serevr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(serevr)->GetArena();
    if (message_arena != submessage_arena) {
      serevr = ::google::protobuf::internal::GetOwnedMessage(message_arena, serevr, submessage_arena);
    }
    set_has_serevr();
    _impl_.payload_.serevr_ = serevr;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.serevr)
}
void Wrapper::clear_serevr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSerevr) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.serevr_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.serevr_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_invite_link(::Invite_link* invite_link) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (invite_link) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(invite_link)->GetArena();
    if (message_arena != submessage_arena) {
      invite_link = ::google::protobuf::internal::GetOwnedMessage(message_arena, invite_link, submessage_arena);
    }
    set_has_invite_link();
    _impl_.payload_.invite_link_ = invite_link;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.invite_link)
}
void Wrapper::clear_invite_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kInviteLink) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.invite_link_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.invite_link_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_vpn_graph(::Vpn_graph* vpn_graph) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vpn_graph) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vpn_graph)->GetArena();
    if (message_arena != submessage_arena) {
      vpn_graph = ::google::protobuf::internal::GetOwnedMessage(message_arena, vpn_graph, submessage_arena);
    }
    set_has_vpn_graph();
    _impl_.payload_.vpn_graph_ = vpn_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.vpn_graph)
}
void Wrapper::clear_vpn_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kVpnGraph) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vpn_graph_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.vpn_graph_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_authresponse(::AuthResponse* authresponse) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (authresponse) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(authresponse)->GetArena();
    if (message_arena != submessage_arena) {
      authresponse = ::google::protobuf::internal::GetOwnedMessage(message_arena, authresponse, submessage_arena);
    }
    set_has_authresponse();
    _impl_.payload_.authresponse_ = authresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.authResponse)
}
void Wrapper::clear_authresponse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAuthResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.authresponse_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.authresponse_);
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_contact(::Contact* contact) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (contact) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(contact)->GetArena();
    if (message_arena != submessage_arena) {
      contact = ::google::protobuf::internal::GetOwnedMessage(message_arena, contact, submessage_arena);
    }
    set_has_contact();
    _impl_.payload_.contact_ = contact;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.contact)
}
void Wrapper::clear_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kContact) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.contact_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.contact_);
    }
    clear_has_payload();
  }
}
Wrapper::Wrapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Wrapper)
}
inline PROTOBUF_NDEBUG_INLINE Wrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Wrapper& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        authtoken_(arena, from.authtoken_),
        payload_{},
        _oneof_case_{from._oneof_case_[0]} {}

Wrapper::Wrapper(
    ::google::protobuf::Arena* arena,
    const Wrapper& from)
    : ::google::protobuf::Message(arena) {
  Wrapper* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.route_ = from._impl_.route_;
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kUser:
        _impl_.payload_.user_ = ::google::protobuf::Message::CopyConstruct<::User>(arena, *from._impl_.payload_.user_);
        break;
      case kPerson:
        _impl_.payload_.person_ = ::google::protobuf::Message::CopyConstruct<::Person>(arena, *from._impl_.payload_.person_);
        break;
      case kMessage:
        _impl_.payload_.message_ = ::google::protobuf::Message::CopyConstruct<::Message>(arena, *from._impl_.payload_.message_);
        break;
      case kAuth:
        _impl_.payload_.auth_ = ::google::protobuf::Message::CopyConstruct<::Auth>(arena, *from._impl_.payload_.auth_);
        break;
      case kReport:
        _impl_.payload_.report_ = ::google::protobuf::Message::CopyConstruct<::Report>(arena, *from._impl_.payload_.report_);
        break;
      case kSerevr:
        _impl_.payload_.serevr_ = ::google::protobuf::Message::CopyConstruct<::Server>(arena, *from._impl_.payload_.serevr_);
        break;
      case kInviteLink:
        _impl_.payload_.invite_link_ = ::google::protobuf::Message::CopyConstruct<::Invite_link>(arena, *from._impl_.payload_.invite_link_);
        break;
      case kVpnGraph:
        _impl_.payload_.vpn_graph_ = ::google::protobuf::Message::CopyConstruct<::Vpn_graph>(arena, *from._impl_.payload_.vpn_graph_);
        break;
      case kAuthResponse:
        _impl_.payload_.authresponse_ = ::google::protobuf::Message::CopyConstruct<::AuthResponse>(arena, *from._impl_.payload_.authresponse_);
        break;
      case kContact:
        _impl_.payload_.contact_ = ::google::protobuf::Message::CopyConstruct<::Contact>(arena, *from._impl_.payload_.contact_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:Wrapper)
}
inline PROTOBUF_NDEBUG_INLINE Wrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        authtoken_(arena),
        payload_{},
        _oneof_case_{} {}

inline void Wrapper::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.route_ = {};
}
Wrapper::~Wrapper() {
  // @@protoc_insertion_point(destructor:Wrapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Wrapper::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.authtoken_.Destroy();
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void Wrapper::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:Wrapper)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kUser: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.user_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.user_);
      }
      break;
    }
    case kPerson: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.person_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.person_);
      }
      break;
    }
    case kMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.message_);
      }
      break;
    }
    case kAuth: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.auth_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.auth_);
      }
      break;
    }
    case kReport: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.report_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.report_);
      }
      break;
    }
    case kSerevr: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.serevr_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.serevr_);
      }
      break;
    }
    case kInviteLink: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.invite_link_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.invite_link_);
      }
      break;
    }
    case kVpnGraph: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vpn_graph_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.vpn_graph_);
      }
      break;
    }
    case kAuthResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.authresponse_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.authresponse_);
      }
      break;
    }
    case kContact: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.contact_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.contact_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
Wrapper::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Wrapper, _impl_._cached_size_),
              false,
          },
          &Wrapper::MergeImpl,
          &Wrapper::kDescriptorMethods,
          &descriptor_table_wrapper_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 12, 10, 33, 2> Wrapper::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Wrapper, _impl_._has_bits_),
    0, // no _extensions_
    12, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Wrapper_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Wrapper>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string AuthToken = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.authtoken_)}},
    // uint32 route = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Wrapper, _impl_.route_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.route_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 route = 1;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.route_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // optional string AuthToken = 2;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.authtoken_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .User user = 3;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.user_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Person person = 4;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.person_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Message message = 5;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.message_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Auth auth = 6;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.auth_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Report report = 7;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.report_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Server serevr = 8;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.serevr_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Invite_link invite_link = 9;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.invite_link_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Vpn_graph vpn_graph = 10;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.vpn_graph_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .AuthResponse authResponse = 11;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.authresponse_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Contact contact = 12;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.contact_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::User>()},
    {::_pbi::TcParser::GetTable<::Person>()},
    {::_pbi::TcParser::GetTable<::Message>()},
    {::_pbi::TcParser::GetTable<::Auth>()},
    {::_pbi::TcParser::GetTable<::Report>()},
    {::_pbi::TcParser::GetTable<::Server>()},
    {::_pbi::TcParser::GetTable<::Invite_link>()},
    {::_pbi::TcParser::GetTable<::Vpn_graph>()},
    {::_pbi::TcParser::GetTable<::AuthResponse>()},
    {::_pbi::TcParser::GetTable<::Contact>()},
  }}, {{
    "\7\0\11\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "Wrapper"
    "AuthToken"
  }},
};

PROTOBUF_NOINLINE void Wrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:Wrapper)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.authtoken_.ClearNonDefaultToEmpty();
  }
  _impl_.route_ = 0u;
  clear_payload();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Wrapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wrapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 route = 1;
  if (this->_internal_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_route(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string AuthToken = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_authtoken();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Wrapper.AuthToken");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  switch (payload_case()) {
    case kUser: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.payload_.user_, _impl_.payload_.user_->GetCachedSize(), target, stream);
      break;
    }
    case kPerson: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *_impl_.payload_.person_, _impl_.payload_.person_->GetCachedSize(), target, stream);
      break;
    }
    case kMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *_impl_.payload_.message_, _impl_.payload_.message_->GetCachedSize(), target, stream);
      break;
    }
    case kAuth: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *_impl_.payload_.auth_, _impl_.payload_.auth_->GetCachedSize(), target, stream);
      break;
    }
    case kReport: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *_impl_.payload_.report_, _impl_.payload_.report_->GetCachedSize(), target, stream);
      break;
    }
    case kSerevr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *_impl_.payload_.serevr_, _impl_.payload_.serevr_->GetCachedSize(), target, stream);
      break;
    }
    case kInviteLink: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *_impl_.payload_.invite_link_, _impl_.payload_.invite_link_->GetCachedSize(), target, stream);
      break;
    }
    case kVpnGraph: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *_impl_.payload_.vpn_graph_, _impl_.payload_.vpn_graph_->GetCachedSize(), target, stream);
      break;
    }
    case kAuthResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, *_impl_.payload_.authresponse_, _impl_.payload_.authresponse_->GetCachedSize(), target, stream);
      break;
    }
    case kContact: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, *_impl_.payload_.contact_, _impl_.payload_.contact_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wrapper)
  return target;
}

::size_t Wrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Wrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // optional string AuthToken = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_authtoken());
  }

  // uint32 route = 1;
  if (this->_internal_route() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_route());
  }

  switch (payload_case()) {
    // .User user = 3;
    case kUser: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.user_);
      break;
    }
    // .Person person = 4;
    case kPerson: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.person_);
      break;
    }
    // .Message message = 5;
    case kMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.message_);
      break;
    }
    // .Auth auth = 6;
    case kAuth: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.auth_);
      break;
    }
    // .Report report = 7;
    case kReport: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.report_);
      break;
    }
    // .Server serevr = 8;
    case kSerevr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.serevr_);
      break;
    }
    // .Invite_link invite_link = 9;
    case kInviteLink: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.invite_link_);
      break;
    }
    // .Vpn_graph vpn_graph = 10;
    case kVpnGraph: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vpn_graph_);
      break;
    }
    // .AuthResponse authResponse = 11;
    case kAuthResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.authresponse_);
      break;
    }
    // .Contact contact = 12;
    case kContact: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.contact_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Wrapper::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Wrapper*>(&to_msg);
  auto& from = static_cast<const Wrapper&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Wrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_authtoken(from._internal_authtoken());
  }
  if (from._internal_route() != 0) {
    _this->_impl_.route_ = from._impl_.route_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kUser: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.user_ =
              ::google::protobuf::Message::CopyConstruct<::User>(arena, *from._impl_.payload_.user_);
        } else {
          _this->_impl_.payload_.user_->MergeFrom(from._internal_user());
        }
        break;
      }
      case kPerson: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.person_ =
              ::google::protobuf::Message::CopyConstruct<::Person>(arena, *from._impl_.payload_.person_);
        } else {
          _this->_impl_.payload_.person_->MergeFrom(from._internal_person());
        }
        break;
      }
      case kMessage: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.message_ =
              ::google::protobuf::Message::CopyConstruct<::Message>(arena, *from._impl_.payload_.message_);
        } else {
          _this->_impl_.payload_.message_->MergeFrom(from._internal_message());
        }
        break;
      }
      case kAuth: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.auth_ =
              ::google::protobuf::Message::CopyConstruct<::Auth>(arena, *from._impl_.payload_.auth_);
        } else {
          _this->_impl_.payload_.auth_->MergeFrom(from._internal_auth());
        }
        break;
      }
      case kReport: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.report_ =
              ::google::protobuf::Message::CopyConstruct<::Report>(arena, *from._impl_.payload_.report_);
        } else {
          _this->_impl_.payload_.report_->MergeFrom(from._internal_report());
        }
        break;
      }
      case kSerevr: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.serevr_ =
              ::google::protobuf::Message::CopyConstruct<::Server>(arena, *from._impl_.payload_.serevr_);
        } else {
          _this->_impl_.payload_.serevr_->MergeFrom(from._internal_serevr());
        }
        break;
      }
      case kInviteLink: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.invite_link_ =
              ::google::protobuf::Message::CopyConstruct<::Invite_link>(arena, *from._impl_.payload_.invite_link_);
        } else {
          _this->_impl_.payload_.invite_link_->MergeFrom(from._internal_invite_link());
        }
        break;
      }
      case kVpnGraph: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.vpn_graph_ =
              ::google::protobuf::Message::CopyConstruct<::Vpn_graph>(arena, *from._impl_.payload_.vpn_graph_);
        } else {
          _this->_impl_.payload_.vpn_graph_->MergeFrom(from._internal_vpn_graph());
        }
        break;
      }
      case kAuthResponse: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.authresponse_ =
              ::google::protobuf::Message::CopyConstruct<::AuthResponse>(arena, *from._impl_.payload_.authresponse_);
        } else {
          _this->_impl_.payload_.authresponse_->MergeFrom(from._internal_authresponse());
        }
        break;
      }
      case kContact: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.contact_ =
              ::google::protobuf::Message::CopyConstruct<::Contact>(arena, *from._impl_.payload_.contact_);
        } else {
          _this->_impl_.payload_.contact_->MergeFrom(from._internal_contact());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Wrapper::CopyFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Wrapper::InternalSwap(Wrapper* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authtoken_, &other->_impl_.authtoken_, arena);
        swap(_impl_.route_, other->_impl_.route_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Wrapper::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_wrapper_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
