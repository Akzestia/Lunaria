// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: contact.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_contact_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_contact_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_contact_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_contact_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_contact_2eproto;
class Contact;
struct ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Contact final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Contact) */ {
 public:
  inline Contact() : Contact(nullptr) {}
  ~Contact() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Contact(
      ::google::protobuf::internal::ConstantInitialized);

  inline Contact(const Contact& from) : Contact(nullptr, from) {}
  inline Contact(Contact&& from) noexcept
      : Contact(nullptr, std::move(from)) {}
  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contact& operator=(Contact&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contact& default_instance() {
    return *internal_default_instance();
  }
  enum AUserIdCase {
    kAUserIdInt = 1,
    kAUserIdString = 2,
    A_USER_ID_NOT_SET = 0,
  };
  enum BUserIdCase {
    kBUserIdInt = 3,
    kBUserIdString = 4,
    B_USER_ID_NOT_SET = 0,
  };
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
        &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Contact& a, Contact& b) { a.Swap(&b); }
  inline void Swap(Contact* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contact* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contact* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Contact>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Contact& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Contact& from) { Contact::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Contact* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Contact"; }

 protected:
  explicit Contact(::google::protobuf::Arena* arena);
  Contact(::google::protobuf::Arena* arena, const Contact& from);
  Contact(::google::protobuf::Arena* arena, Contact&& from) noexcept
      : Contact(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAUserNameFieldNumber = 5,
    kBUserNameFieldNumber = 6,
    kAUserIdIntFieldNumber = 1,
    kAUserIdStringFieldNumber = 2,
    kBUserIdIntFieldNumber = 3,
    kBUserIdStringFieldNumber = 4,
  };
  // string a_user_name = 5;
  void clear_a_user_name() ;
  const std::string& a_user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_a_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_a_user_name();
  PROTOBUF_NODISCARD std::string* release_a_user_name();
  void set_allocated_a_user_name(std::string* value);

  private:
  const std::string& _internal_a_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a_user_name(
      const std::string& value);
  std::string* _internal_mutable_a_user_name();

  public:
  // string b_user_name = 6;
  void clear_b_user_name() ;
  const std::string& b_user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_b_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_b_user_name();
  PROTOBUF_NODISCARD std::string* release_b_user_name();
  void set_allocated_b_user_name(std::string* value);

  private:
  const std::string& _internal_b_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b_user_name(
      const std::string& value);
  std::string* _internal_mutable_b_user_name();

  public:
  // int32 a_user_id_int = 1;
  bool has_a_user_id_int() const;
  void clear_a_user_id_int() ;
  ::int32_t a_user_id_int() const;
  void set_a_user_id_int(::int32_t value);

  private:
  ::int32_t _internal_a_user_id_int() const;
  void _internal_set_a_user_id_int(::int32_t value);

  public:
  // string a_user_id_string = 2;
  bool has_a_user_id_string() const;
  void clear_a_user_id_string() ;
  const std::string& a_user_id_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_a_user_id_string(Arg_&& arg, Args_... args);
  std::string* mutable_a_user_id_string();
  PROTOBUF_NODISCARD std::string* release_a_user_id_string();
  void set_allocated_a_user_id_string(std::string* value);

  private:
  const std::string& _internal_a_user_id_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a_user_id_string(
      const std::string& value);
  std::string* _internal_mutable_a_user_id_string();

  public:
  // int32 b_user_id_int = 3;
  bool has_b_user_id_int() const;
  void clear_b_user_id_int() ;
  ::int32_t b_user_id_int() const;
  void set_b_user_id_int(::int32_t value);

  private:
  ::int32_t _internal_b_user_id_int() const;
  void _internal_set_b_user_id_int(::int32_t value);

  public:
  // string b_user_id_string = 4;
  bool has_b_user_id_string() const;
  void clear_b_user_id_string() ;
  const std::string& b_user_id_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_b_user_id_string(Arg_&& arg, Args_... args);
  std::string* mutable_b_user_id_string();
  PROTOBUF_NODISCARD std::string* release_b_user_id_string();
  void set_allocated_b_user_id_string(std::string* value);

  private:
  const std::string& _internal_b_user_id_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b_user_id_string(
      const std::string& value);
  std::string* _internal_mutable_b_user_id_string();

  public:
  void clear_a_user_id();
  AUserIdCase a_user_id_case() const;
  void clear_b_user_id();
  BUserIdCase b_user_id_case() const;
  // @@protoc_insertion_point(class_scope:Contact)
 private:
  class _Internal;
  void set_has_a_user_id_int();
  void set_has_a_user_id_string();
  void set_has_b_user_id_int();
  void set_has_b_user_id_string();
  inline bool has_a_user_id() const;
  inline void clear_has_a_user_id();
  inline bool has_b_user_id() const;
  inline void clear_has_b_user_id();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 6, 0,
      70, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Contact_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Contact& from_msg);
    ::google::protobuf::internal::ArenaStringPtr a_user_name_;
    ::google::protobuf::internal::ArenaStringPtr b_user_name_;
    union AUserIdUnion {
      constexpr AUserIdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t a_user_id_int_;
      ::google::protobuf::internal::ArenaStringPtr a_user_id_string_;
    } a_user_id_;
    union BUserIdUnion {
      constexpr BUserIdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t b_user_id_int_;
      ::google::protobuf::internal::ArenaStringPtr b_user_id_string_;
    } b_user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Contact

// int32 a_user_id_int = 1;
inline bool Contact::has_a_user_id_int() const {
  return a_user_id_case() == kAUserIdInt;
}
inline void Contact::set_has_a_user_id_int() {
  _impl_._oneof_case_[0] = kAUserIdInt;
}
inline void Contact::clear_a_user_id_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (a_user_id_case() == kAUserIdInt) {
    _impl_.a_user_id_.a_user_id_int_ = 0;
    clear_has_a_user_id();
  }
}
inline ::int32_t Contact::a_user_id_int() const {
  // @@protoc_insertion_point(field_get:Contact.a_user_id_int)
  return _internal_a_user_id_int();
}
inline void Contact::set_a_user_id_int(::int32_t value) {
  if (a_user_id_case() != kAUserIdInt) {
    clear_a_user_id();
    set_has_a_user_id_int();
  }
  _impl_.a_user_id_.a_user_id_int_ = value;
  // @@protoc_insertion_point(field_set:Contact.a_user_id_int)
}
inline ::int32_t Contact::_internal_a_user_id_int() const {
  if (a_user_id_case() == kAUserIdInt) {
    return _impl_.a_user_id_.a_user_id_int_;
  }
  return 0;
}

// string a_user_id_string = 2;
inline bool Contact::has_a_user_id_string() const {
  return a_user_id_case() == kAUserIdString;
}
inline void Contact::set_has_a_user_id_string() {
  _impl_._oneof_case_[0] = kAUserIdString;
}
inline void Contact::clear_a_user_id_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (a_user_id_case() == kAUserIdString) {
    _impl_.a_user_id_.a_user_id_string_.Destroy();
    clear_has_a_user_id();
  }
}
inline const std::string& Contact::a_user_id_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Contact.a_user_id_string)
  return _internal_a_user_id_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contact::set_a_user_id_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (a_user_id_case() != kAUserIdString) {
    clear_a_user_id();

    set_has_a_user_id_string();
    _impl_.a_user_id_.a_user_id_string_.InitDefault();
  }
  _impl_.a_user_id_.a_user_id_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Contact.a_user_id_string)
}
inline std::string* Contact::mutable_a_user_id_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_a_user_id_string();
  // @@protoc_insertion_point(field_mutable:Contact.a_user_id_string)
  return _s;
}
inline const std::string& Contact::_internal_a_user_id_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (a_user_id_case() != kAUserIdString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.a_user_id_.a_user_id_string_.Get();
}
inline void Contact::_internal_set_a_user_id_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (a_user_id_case() != kAUserIdString) {
    clear_a_user_id();

    set_has_a_user_id_string();
    _impl_.a_user_id_.a_user_id_string_.InitDefault();
  }
  _impl_.a_user_id_.a_user_id_string_.Set(value, GetArena());
}
inline std::string* Contact::_internal_mutable_a_user_id_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (a_user_id_case() != kAUserIdString) {
    clear_a_user_id();

    set_has_a_user_id_string();
    _impl_.a_user_id_.a_user_id_string_.InitDefault();
  }
  return _impl_.a_user_id_.a_user_id_string_.Mutable( GetArena());
}
inline std::string* Contact::release_a_user_id_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Contact.a_user_id_string)
  if (a_user_id_case() != kAUserIdString) {
    return nullptr;
  }
  clear_has_a_user_id();
  return _impl_.a_user_id_.a_user_id_string_.Release();
}
inline void Contact::set_allocated_a_user_id_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_a_user_id()) {
    clear_a_user_id();
  }
  if (value != nullptr) {
    set_has_a_user_id_string();
    _impl_.a_user_id_.a_user_id_string_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Contact.a_user_id_string)
}

// int32 b_user_id_int = 3;
inline bool Contact::has_b_user_id_int() const {
  return b_user_id_case() == kBUserIdInt;
}
inline void Contact::set_has_b_user_id_int() {
  _impl_._oneof_case_[1] = kBUserIdInt;
}
inline void Contact::clear_b_user_id_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (b_user_id_case() == kBUserIdInt) {
    _impl_.b_user_id_.b_user_id_int_ = 0;
    clear_has_b_user_id();
  }
}
inline ::int32_t Contact::b_user_id_int() const {
  // @@protoc_insertion_point(field_get:Contact.b_user_id_int)
  return _internal_b_user_id_int();
}
inline void Contact::set_b_user_id_int(::int32_t value) {
  if (b_user_id_case() != kBUserIdInt) {
    clear_b_user_id();
    set_has_b_user_id_int();
  }
  _impl_.b_user_id_.b_user_id_int_ = value;
  // @@protoc_insertion_point(field_set:Contact.b_user_id_int)
}
inline ::int32_t Contact::_internal_b_user_id_int() const {
  if (b_user_id_case() == kBUserIdInt) {
    return _impl_.b_user_id_.b_user_id_int_;
  }
  return 0;
}

// string b_user_id_string = 4;
inline bool Contact::has_b_user_id_string() const {
  return b_user_id_case() == kBUserIdString;
}
inline void Contact::set_has_b_user_id_string() {
  _impl_._oneof_case_[1] = kBUserIdString;
}
inline void Contact::clear_b_user_id_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (b_user_id_case() == kBUserIdString) {
    _impl_.b_user_id_.b_user_id_string_.Destroy();
    clear_has_b_user_id();
  }
}
inline const std::string& Contact::b_user_id_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Contact.b_user_id_string)
  return _internal_b_user_id_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contact::set_b_user_id_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (b_user_id_case() != kBUserIdString) {
    clear_b_user_id();

    set_has_b_user_id_string();
    _impl_.b_user_id_.b_user_id_string_.InitDefault();
  }
  _impl_.b_user_id_.b_user_id_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Contact.b_user_id_string)
}
inline std::string* Contact::mutable_b_user_id_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_b_user_id_string();
  // @@protoc_insertion_point(field_mutable:Contact.b_user_id_string)
  return _s;
}
inline const std::string& Contact::_internal_b_user_id_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (b_user_id_case() != kBUserIdString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.b_user_id_.b_user_id_string_.Get();
}
inline void Contact::_internal_set_b_user_id_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (b_user_id_case() != kBUserIdString) {
    clear_b_user_id();

    set_has_b_user_id_string();
    _impl_.b_user_id_.b_user_id_string_.InitDefault();
  }
  _impl_.b_user_id_.b_user_id_string_.Set(value, GetArena());
}
inline std::string* Contact::_internal_mutable_b_user_id_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (b_user_id_case() != kBUserIdString) {
    clear_b_user_id();

    set_has_b_user_id_string();
    _impl_.b_user_id_.b_user_id_string_.InitDefault();
  }
  return _impl_.b_user_id_.b_user_id_string_.Mutable( GetArena());
}
inline std::string* Contact::release_b_user_id_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Contact.b_user_id_string)
  if (b_user_id_case() != kBUserIdString) {
    return nullptr;
  }
  clear_has_b_user_id();
  return _impl_.b_user_id_.b_user_id_string_.Release();
}
inline void Contact::set_allocated_b_user_id_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_b_user_id()) {
    clear_b_user_id();
  }
  if (value != nullptr) {
    set_has_b_user_id_string();
    _impl_.b_user_id_.b_user_id_string_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Contact.b_user_id_string)
}

// string a_user_name = 5;
inline void Contact::clear_a_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_user_name_.ClearToEmpty();
}
inline const std::string& Contact::a_user_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Contact.a_user_name)
  return _internal_a_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contact::set_a_user_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Contact.a_user_name)
}
inline std::string* Contact::mutable_a_user_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_a_user_name();
  // @@protoc_insertion_point(field_mutable:Contact.a_user_name)
  return _s;
}
inline const std::string& Contact::_internal_a_user_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.a_user_name_.Get();
}
inline void Contact::_internal_set_a_user_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_user_name_.Set(value, GetArena());
}
inline std::string* Contact::_internal_mutable_a_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.a_user_name_.Mutable( GetArena());
}
inline std::string* Contact::release_a_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Contact.a_user_name)
  return _impl_.a_user_name_.Release();
}
inline void Contact::set_allocated_a_user_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_user_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.a_user_name_.IsDefault()) {
          _impl_.a_user_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Contact.a_user_name)
}

// string b_user_name = 6;
inline void Contact::clear_b_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_user_name_.ClearToEmpty();
}
inline const std::string& Contact::b_user_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Contact.b_user_name)
  return _internal_b_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contact::set_b_user_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Contact.b_user_name)
}
inline std::string* Contact::mutable_b_user_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_b_user_name();
  // @@protoc_insertion_point(field_mutable:Contact.b_user_name)
  return _s;
}
inline const std::string& Contact::_internal_b_user_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.b_user_name_.Get();
}
inline void Contact::_internal_set_b_user_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_user_name_.Set(value, GetArena());
}
inline std::string* Contact::_internal_mutable_b_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.b_user_name_.Mutable( GetArena());
}
inline std::string* Contact::release_b_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Contact.b_user_name)
  return _impl_.b_user_name_.Release();
}
inline void Contact::set_allocated_b_user_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_user_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.b_user_name_.IsDefault()) {
          _impl_.b_user_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Contact.b_user_name)
}

inline bool Contact::has_a_user_id() const {
  return a_user_id_case() != A_USER_ID_NOT_SET;
}
inline void Contact::clear_has_a_user_id() {
  _impl_._oneof_case_[0] = A_USER_ID_NOT_SET;
}
inline bool Contact::has_b_user_id() const {
  return b_user_id_case() != B_USER_ID_NOT_SET;
}
inline void Contact::clear_has_b_user_id() {
  _impl_._oneof_case_[1] = B_USER_ID_NOT_SET;
}
inline Contact::AUserIdCase Contact::a_user_id_case() const {
  return Contact::AUserIdCase(_impl_._oneof_case_[0]);
}
inline Contact::BUserIdCase Contact::b_user_id_case() const {
  return Contact::BUserIdCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_contact_2eproto_2epb_2eh
